// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	context "context"

	domain "github.com/Russia9/its-bmstu-go-architecture/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// PostRepository is an autogenerated mock type for the PostRepository type
type PostRepository struct {
	mock.Mock
}

type PostRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PostRepository) EXPECT() *PostRepository_Expecter {
	return &PostRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, post
func (_m *PostRepository) Create(ctx context.Context, post *domain.Post) error {
	ret := _m.Called(ctx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PostRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - post *domain.Post
func (_e *PostRepository_Expecter) Create(ctx interface{}, post interface{}) *PostRepository_Create_Call {
	return &PostRepository_Create_Call{Call: _e.mock.On("Create", ctx, post)}
}

func (_c *PostRepository_Create_Call) Run(run func(ctx context.Context, post *domain.Post)) *PostRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Post))
	})
	return _c
}

func (_c *PostRepository_Create_Call) Return(_a0 error) *PostRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.Post) error) *PostRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PostRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PostRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *PostRepository_Expecter) Delete(ctx interface{}, id interface{}) *PostRepository_Delete_Call {
	return &PostRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *PostRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *PostRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PostRepository_Delete_Call) Return(_a0 error) *PostRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *PostRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *PostRepository) Get(ctx context.Context, id string) (*domain.Post, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PostRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *PostRepository_Expecter) Get(ctx interface{}, id interface{}) *PostRepository_Get_Call {
	return &PostRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *PostRepository_Get_Call) Run(run func(ctx context.Context, id string)) *PostRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PostRepository_Get_Call) Return(_a0 *domain.Post, _a1 error) *PostRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*domain.Post, error)) *PostRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, post
func (_m *PostRepository) Update(ctx context.Context, post *domain.Post) error {
	ret := _m.Called(ctx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PostRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - post *domain.Post
func (_e *PostRepository_Expecter) Update(ctx interface{}, post interface{}) *PostRepository_Update_Call {
	return &PostRepository_Update_Call{Call: _e.mock.On("Update", ctx, post)}
}

func (_c *PostRepository_Update_Call) Run(run func(ctx context.Context, post *domain.Post)) *PostRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Post))
	})
	return _c
}

func (_c *PostRepository_Update_Call) Return(_a0 error) *PostRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostRepository_Update_Call) RunAndReturn(run func(context.Context, *domain.Post) error) *PostRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPostRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostRepository creates a new instance of PostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostRepository(t mockConstructorTestingTNewPostRepository) *PostRepository {
	mock := &PostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
